{"version":3,"file":"validate-conditions-and-run-flow.js","sourceRoot":"","sources":["../../src/validate-conditions-and-run-flow.ts"],"names":[],"mappings":";;;AAAA,+DAA0D;AASnD,MAAM,4BAA4B,GAAG,CAAI,EAC9C,SAAS,EACT,OAAO,EACP,UAAU,EACV,aAAa,GAAG,EAAE,GAMnB,EAAW,EAAE;IACZ,IAAI,CAAC,SAAS,EAAE;QACd,OAAO,IAAI,CAAC;KACb;IAED,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;QAC5B,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC,eAAe,EAAE,EAAE,CACzC,IAAA,oCAA4B,EAAC,EAAE,aAAa,EAAE,UAAU,EAAE,SAAS,EAAE,eAAe,EAAE,OAAO,EAAE,CAAC,CACjG,CAAC;KACH;IAED,IACE,IAAA,uCAAiB,EAAI;QACnB,SAAS,EAAE,SAAS,CAAC,iBAAiB;QACtC,aAAa,EAAE,OAAO;QACtB,aAAa;KACd,CAAC,EACF;QACA,OAAO,IAAI,CAAC;KACb;IAED,MAAM,SAAS,GAAG,IAAA,uCAAiB,EAAI;QACrC,SAAS,EAAE,SAAS,CAAC,mBAAmB;QACxC,aAAa,EAAE,OAAO;QACtB,aAAa;KACd,CAAC,CAAC;IAEH,IAAI,SAAS,IAAK,SAA0C,CAAC,SAAS,EAAE;QACtE,UAAU,CAAE,SAA0C,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAE3E,OAAO,KAAK,CAAC;KACd;IAED,IAAI,CAAC,SAAS,IAAK,SAA0C,CAAC,SAAS,EAAE;QACvE,UAAU,CAAE,SAA0C,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAE3E,OAAO,KAAK,CAAC;KACd;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAlDW,QAAA,4BAA4B,gCAkDvC","sourcesContent":["import { validateCondition } from './condition-functions';\nimport {\n  ConditionsMap,\n  Flow,\n  FlowValidator,\n  FlowValidatorWithFailureFlow,\n  FlowValidatorWithSuccessFlow,\n} from './interfaces';\n\nexport const validateConditionsAndRunFlow = <T>({\n  validator,\n  context,\n  flowRunner,\n  conditionsMap = {},\n}: {\n  validator: FlowValidator | FlowValidator[];\n  context: T;\n  flowRunner: (flow: Flow, context: T) => void;\n  conditionsMap?: ConditionsMap;\n}): boolean => {\n  if (!validator) {\n    return true;\n  }\n\n  if (Array.isArray(validator)) {\n    return validator.every((validatorObject) =>\n      validateConditionsAndRunFlow({ conditionsMap, flowRunner, validator: validatorObject, context }),\n    );\n  }\n\n  if (\n    validateCondition<T>({\n      condition: validator.conditionToIgnore,\n      globalContext: context,\n      conditionsMap,\n    })\n  ) {\n    return true;\n  }\n\n  const isSuccess = validateCondition<T>({\n    condition: validator.conditionToValidate,\n    globalContext: context,\n    conditionsMap,\n  });\n\n  if (isSuccess && (validator as FlowValidatorWithSuccessFlow).onSuccess) {\n    flowRunner((validator as FlowValidatorWithSuccessFlow).onSuccess, context);\n\n    return false;\n  }\n\n  if (!isSuccess && (validator as FlowValidatorWithFailureFlow).onFailure) {\n    flowRunner((validator as FlowValidatorWithFailureFlow).onFailure, context);\n\n    return false;\n  }\n\n  return true;\n};\n"]}