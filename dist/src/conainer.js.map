{"version":3,"file":"conainer.js","sourceRoot":"","sources":["../../src/conainer.ts"],"names":[],"mappings":"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","sourcesContent":["const isClass = (variable) =>\n  Boolean(\n    typeof variable === 'function' &&\n      variable.prototype &&\n      !Object.getOwnPropertyDescriptor(variable, 'prototype')?.writable,\n  );\n\ninterface Class<T = any, F extends Array<any> = any[]> {\n  injectDependencies?: F;\n  new (...args: F): T;\n}\n\ninterface DefaultProviderOptions<T extends Class = any> {\n  provider: T;\n  multi?: boolean;\n}\n\ninterface UseClassProviderOptions<T extends Class = any, F extends Class = any> extends DefaultProviderOptions<T> {\n  useClass: F;\n}\n\ninterface UseValueProviderOptions<T = any, F = any> extends DefaultProviderOptions {\n  provider: T;\n  useValue: F;\n}\n\ninterface UseExistingProviderOptions<T = any, F = any> extends DefaultProviderOptions {\n  provider: T;\n  useExisting: F;\n}\n\ninterface UseFactoryProviderOptions<T extends Class = any, F = any, R extends Array<any> = any[]>\n  extends DefaultProviderOptions<T> {\n  useFactory: F;\n  deps?: R;\n}\n\ninterface DefaultProviderOptionsWithDeps<R extends Array<any> = any[]> extends DefaultProviderOptions {\n  deps?: R;\n}\n\nexport type ProviderOptions<F = any, T extends Class = Class<F>> =\n  | UseClassProviderOptions\n  | UseValueProviderOptions\n  | UseExistingProviderOptions\n  | UseFactoryProviderOptions\n  | T;\n\nexport class Container {\n  private instances = new Map();\n  private providersToRegister = new Map<any, ProviderOptions>();\n  private providersWithParentDepsInInstances = new Map<any, ProviderOptions>();\n\n  private parentDepsInInstances = new Map<any, Map<any, true>>();\n  private requiredDepsForProvidersToRegister = new Map<any, Map<any, true>>();\n\n  private callbacks: ((token: any) => void)[] = [];\n\n  constructor(private parentContainer?: Container) {\n    if (parentContainer) {\n      parentContainer.onProviderRegistered((token) => this.tryRegisterProviders(token));\n    }\n  }\n\n  public onProviderRegistered(callback: (token: any) => void) {\n    this.callbacks.push(callback);\n  }\n\n  public inject<T = any>(token: any): T {\n    if (this.instances.has(token)) {\n      return this.instances.get(token) as T;\n    }\n\n    if (this.parentContainer && this.parentContainer.has(token)) {\n      return this.parentContainer.inject<T>(token) as T;\n    }\n  }\n\n  public has(token: any): boolean {\n    return this.instances.has(token) || (this.parentContainer && this.parentContainer.has(token));\n  }\n\n  public registerProviders(providers: ProviderOptions[]) {\n    providers.forEach((provider) => this.registerProvider(provider));\n  }\n\n  public registerProvider(providerOptions: ProviderOptions) {\n    if (isClass(providerOptions)) {\n      this.registerDefaultProvider(providerOptions as Class);\n    }\n    if ((providerOptions as UseValueProviderOptions).useValue) {\n      return this.registerValue(providerOptions as UseValueProviderOptions);\n    }\n    if ((providerOptions as UseClassProviderOptions).useClass) {\n      return this.registerUseClassProvider(providerOptions as UseClassProviderOptions);\n    }\n    if ((providerOptions as UseExistingProviderOptions).useExisting) {\n      return this.registerUseExistingProvider(providerOptions as UseExistingProviderOptions);\n    }\n    if ((providerOptions as UseFactoryProviderOptions).useFactory) {\n      return this.registerUseFactoryProvider(providerOptions as UseFactoryProviderOptions);\n    }\n  }\n\n  private setInstance(token: any, insnance: any, multi: boolean = false) {\n    if (!multi && this.instances.has(token)) {\n      throw Error(`You already have ${token} token in your container!`);\n    }\n\n    this.instances.set(token, !multi ? insnance : [...(this.inject(token) || []), insnance]);\n\n    this.tryRegisterDependentProviders(token);\n    this.tryRegisterProviders(token);\n  }\n\n  private registerValue(providerOptions: UseValueProviderOptions) {\n    this.setInstance(providerOptions.provider, providerOptions.useValue, providerOptions.multi);\n  }\n\n  private registerDefaultProvider(provider: Class) {\n    this.registerCreationProvider(\n      {\n        provider,\n        useClass: provider,\n        deps: provider.injectDependencies || [],\n      } as DefaultProviderOptionsWithDeps,\n      provider,\n    );\n  }\n\n  private registerUseClassProvider(providerOptions: UseClassProviderOptions) {\n    this.registerCreationProvider(providerOptions, providerOptions.useClass);\n  }\n\n  private registerUseFactoryProvider(providerOptions: UseFactoryProviderOptions) {\n    this.registerCreationProvider(providerOptions, providerOptions.useFactory, (a, args = []) => a(...args));\n  }\n\n  private registerUseExistingProvider(providerOptions: UseExistingProviderOptions) {\n    if (this.instances.has(providerOptions.provider)) {\n      this.setInstance(providerOptions.provider, this.instances.get(providerOptions.provider), providerOptions.multi);\n      return;\n    }\n\n    if (this.parentContainer && this.parentContainer.has(providerOptions.provider)) {\n      this.providersWithParentDepsInInstances.set(providerOptions.provider, providerOptions);\n      this.setParentDepsInInstances(providerOptions.provider, providerOptions.useExisting);\n\n      this.setInstance(\n        providerOptions.provider,\n        this.parentContainer.inject(providerOptions.provider),\n        providerOptions.multi,\n      );\n\n      return;\n    }\n\n    this.setRequiredDepsForProvidersToRegister(providerOptions.provider, providerOptions.useExisting);\n    this.providersToRegister.set(providerOptions.provider, providerOptions);\n  }\n\n  private registerCreationProvider(\n    providerOptions: DefaultProviderOptionsWithDeps,\n    creationEntity: any,\n    creationFunction: (a: any, args?: any[]) => any = (a, args: any[] = []) => new a(...args),\n  ) {\n    if (!providerOptions?.deps?.length) {\n      this.setInstance(providerOptions.provider, creationFunction(creationEntity), providerOptions.multi);\n      return;\n    }\n\n    const depsMetadata = this.getDepsMetadata(providerOptions.deps);\n\n    if (\n      !depsMetadata.every((data) => {\n        if (data.hasInstance) {\n          return true;\n        }\n        this.setRequiredDepsForProvidersToRegister(providerOptions.provider, data.token);\n\n        return false;\n      })\n    ) {\n      this.providersToRegister.set(providerOptions.provider, providerOptions as ProviderOptions);\n      return;\n    }\n\n    if (depsMetadata.filter(({ isParent }) => isParent).length) {\n      this.providersWithParentDepsInInstances.set(providerOptions.provider, providerOptions as ProviderOptions);\n    }\n\n    depsMetadata\n      .filter(({ isParent }) => isParent)\n      .forEach(({ token }) => this.setParentDepsInInstances(providerOptions.provider, token));\n\n    this.setInstance(\n      providerOptions.provider,\n      creationFunction(\n        creationEntity,\n        depsMetadata.map(({ instance }) => instance),\n      ),\n      providerOptions.multi,\n    );\n  }\n\n  private setRequiredDepsForProvidersToRegister(providerToken: any, requiredToken: any) {\n    if (this.requiredDepsForProvidersToRegister.has(requiredToken)) {\n      const requiredDepsForProvidersToRegisterMap = this.requiredDepsForProvidersToRegister.get(requiredToken);\n\n      (requiredDepsForProvidersToRegisterMap as Map<any, true>).set(providerToken, true);\n\n      this.requiredDepsForProvidersToRegister.set(\n        requiredToken,\n        requiredDepsForProvidersToRegisterMap as Map<any, true>,\n      );\n    } else {\n      this.requiredDepsForProvidersToRegister.set(requiredToken, new Map<any, true>([[providerToken, true]]));\n    }\n  }\n\n  private setParentDepsInInstances(providerToken: any, requiredToken: any) {\n    if (this.parentDepsInInstances.has(requiredToken)) {\n      const parentDepsInInstancesMap = this.parentDepsInInstances.get(requiredToken);\n\n      (parentDepsInInstancesMap as Map<any, true>).set(providerToken, true);\n\n      this.parentDepsInInstances.set(requiredToken, parentDepsInInstancesMap as Map<any, true>);\n    } else {\n      this.parentDepsInInstances.set(requiredToken, new Map<any, true>([[providerToken, true]]));\n    }\n  }\n\n  private getDepsMetadata(deps: any[]) {\n    return deps.map((token) => {\n      if (this.instances.has(token)) {\n        return {\n          token,\n          hasInstance: true,\n          instance: this.instances.get(token),\n          isParent: false,\n        };\n      }\n      if (this.parentContainer && this.parentContainer.has(token)) {\n        return {\n          token,\n          hasInstance: true,\n          instance: this.parentContainer.inject(token),\n          isParent: true,\n        };\n      }\n      return {\n        token,\n        hasInstance: false,\n        instance: undefined,\n        isParent: true,\n      };\n    });\n  }\n\n  private tryRegisterProviders(token: any) {\n    if (this.requiredDepsForProvidersToRegister.has(token)) {\n      Array.from(this.requiredDepsForProvidersToRegister.get(token) as Map<any, true>)\n        .filter(([providerToken]) => token !== providerToken)\n        .forEach(([providerToken]) => {\n          this.registerProvider(this.providersToRegister.get(providerToken) as ProviderOptions);\n        });\n\n      this.requiredDepsForProvidersToRegister.delete(token);\n    }\n  }\n\n  private tryRegisterDependentProviders(token: any) {\n    if (this.parentDepsInInstances.has(token)) {\n      Array.from(this.parentDepsInInstances.get(token) as Map<any, true>)\n        .filter(([providerToken]) => token !== providerToken)\n        .forEach(([providerToken]) => {\n          this.registerProvider(this.providersWithParentDepsInInstances.get(providerToken) as ProviderOptions);\n        });\n\n      this.parentDepsInInstances.delete(token);\n    }\n  }\n}\n\nexport const globalContainer = new Container();\n"]}