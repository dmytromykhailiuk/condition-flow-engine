{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../src/interfaces.ts"],"names":[],"mappings":";;;AAiFA,IAAY,SAYX;AAZD,WAAY,SAAS;IACnB,sBAAS,CAAA;IACT,wBAAW,CAAA;IACX,wBAAW,CAAA;IACX,sBAAS,CAAA;IACT,sBAAS,CAAA;IACT,sBAAS,CAAA;IACT,sBAAS,CAAA;IACT,sBAAS,CAAA;IACT,sBAAS,CAAA;IACT,kCAAqB,CAAA;IACrB,4CAA+B,CAAA;AACjC,CAAC,EAZW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAYpB","sourcesContent":["export interface Action<T extends string = string> {\n  [key: string]: any;\n  type: T;\n}\n\nexport type Flow = string | Action[];\n\nexport interface BackgroundFlow {\n  conditionToSubscribe: ConditionObject | string;\n  conditionToRunFlow: ConditionObject | string;\n  flow: Flow;\n}\n\ninterface EngineBackgroundControlForRunHook {\n  methodName: 'runHook';\n  hookName: string;\n}\n\ninterface EngineBackgroundControlForRunBackgroundFlows {\n  methodName: 'runBackgroundFlows';\n  groupId: string;\n}\n\ninterface EngineBackgroundControlForStopBackgrounFlows {\n  methodName: 'stopBackgrounFlows';\n  groupId: string;\n}\n\ninterface EngineBackgroundControlForStopAllBackgrounFlows {\n  methodName: 'stopAllBackgrounFlows';\n}\n\ninterface EngineBackgroundControlForRunFlow {\n  methodName: 'runFlow';\n  flowName: string;\n}\n\nexport interface EngineBackgroundControlBase {\n  runEngineMethods: (\n    | EngineBackgroundControlForRunHook\n    | EngineBackgroundControlForRunBackgroundFlows\n    | EngineBackgroundControlForStopBackgrounFlows\n    | EngineBackgroundControlForStopAllBackgrounFlows\n    | EngineBackgroundControlForRunFlow\n  )[];\n}\n\ninterface EngineBackgroundControlWithOnce extends EngineBackgroundControlBase {\n  once: boolean;\n}\n\nexport interface EngineBackgroundControlWithTransition extends EngineBackgroundControlBase {\n  from: ConditionObject | string;\n  to: ConditionObject | string;\n  once?: boolean;\n}\n\nexport type EngineBackgroundControl = EngineBackgroundControlWithOnce | EngineBackgroundControlWithTransition;\n\nexport interface BackgroundFlowsMap {\n  [groupId: string]: BackgroundFlow[];\n}\n\nexport interface EngineBackgroundControlsMap {\n  [groupId: string]: EngineBackgroundControl[];\n}\n\nexport type LinkToCondition = string;\n\nexport interface ConditionsMap {\n  [linkToCondition: LinkToCondition]: ConditionObject;\n}\n\nexport interface FlowsMap {\n  [linkToFlow: string]: Action[];\n}\n\nexport interface Hooks {\n  [hookName: string]: ({ condition: ConditionObject | LinkToCondition; flow: Flow } | Flow)[];\n}\n\nexport enum Operation {\n  OR = 'OR',\n  AND = 'AND',\n  NOT = 'NOT',\n  EQ = 'EQ',\n  NE = 'NE',\n  GT = 'GT',\n  LT = 'LT',\n  GE = 'GE',\n  LE = 'LE',\n  INCLUDES = 'INCLUDES',\n  TO_BOOLEAN_EQ = 'TO_BOOLEAN_EQ',\n}\n\nexport interface ConditionObject<T = any> {\n  operation: Operation;\n  mapFromLocalContext?: string[];\n  mapFromGlobalContext?: string[];\n  value: T | ConditionObject | ConditionObject[] | LinkToCondition | LinkToCondition[];\n}\n\nexport interface VariableInCondition<T = any> {\n  mapping: string[];\n  operation: Operation;\n  value: T;\n}\n\nexport interface FlowValidatorBase {\n  conditionToValidate: ConditionObject | LinkToCondition;\n  conditionToIgnore: ConditionObject | LinkToCondition;\n}\n\nexport interface FlowValidatorWithSuccessFlow extends FlowValidatorBase {\n  onSuccess: Flow;\n}\n\nexport interface FlowValidatorWithFailureFlow extends FlowValidatorBase {\n  onFailure: Flow;\n}\n\nexport type FlowValidator = FlowValidatorWithSuccessFlow | FlowValidatorWithFailureFlow;\n\nexport interface FlowValidatorMap {\n  [flowvalidatorName: string]: FlowValidator | FlowValidator[];\n}\n"]}