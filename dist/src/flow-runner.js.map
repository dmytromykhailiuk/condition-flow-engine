{"version":3,"file":"flow-runner.js","sourceRoot":"","sources":["../../src/flow-runner.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, BehaviorSubject, switchMap, filter, take, map, tap, mergeMap } from 'rxjs';\nimport { Action } from './interfaces';\n\nconst generateId = () =>\n  `${Date.now()}${Array.from({ length: 7 }, () => String(Math.floor(Math.random() * 10))).join('')}`;\n\nconst START_FLOW_ACTION_TYPE = '__START_RUN_FLOW__';\nconst FINISH_FLOW_ACTION_TYPE = '__FINISH_RUN_FLOW__';\n\nconst getSuccessActionForFlow = (type: string) => `${type} Success`;\n\nconst flowIsRunning$ = new BehaviorSubject<string[]>([]);\n\nexport type FlowRunner = <T>(actions: Action[], context: T) => Observable<T>;\n\nconst buildFlow = <T>({\n  id,\n  actions,\n  actions$,\n  dispatch,\n  context,\n  prefix,\n}: {\n  id: string;\n  actions: Action;\n  actions$: Observable<Action>;\n  dispatch: (_: Action) => void;\n  context: T;\n  prefix: string;\n}) => {\n  const currentAction = actions[0];\n\n  Promise.resolve().then(() => {\n    dispatch({ ...currentAction, context });\n  });\n\n  return actions$.pipe(\n    filter((action) => action.type === getSuccessActionForFlow(currentAction.type)),\n    take(1),\n    tap(({ context }) => {\n      if (actions.length <= 1) {\n        Promise.resolve().then(() => {\n          dispatch({\n            type: `${prefix} ${FINISH_FLOW_ACTION_TYPE}`,\n            context,\n            id,\n          });\n        });\n\n        flowIsRunning$.next(flowIsRunning$.getValue().slice(1));\n      }\n    }),\n    filter(() => actions.length > 1),\n    switchMap(({ context }) =>\n      buildFlow({\n        id,\n        actions: actions.slice(1),\n        actions$,\n        dispatch,\n        context,\n        prefix,\n      }),\n    ),\n  );\n};\n\nexport const continueWhenFlowIsNotRunning = () =>\n  function <T>(source$: Observable<T>) {\n    return source$.pipe(\n      mergeMap((value: T) =>\n        flowIsRunning$.pipe(\n          filter((flows) => flows.length === 0 || flows[0] === (value as any)?.id),\n          take(1),\n          map(() => value),\n        ),\n      ),\n    );\n  };\n\nexport const createFlowRunner = <T>({\n  actions$,\n  dispatch,\n  prefix = '[FLOW]',\n}: {\n  actions$: Observable<Action>;\n  dispatch: (_: Action) => void;\n  prefix?: string;\n}): FlowRunner => {\n  const type = `${prefix} ${START_FLOW_ACTION_TYPE}`;\n\n  actions$\n    .pipe(\n      filter((action) => action.type === type),\n      tap(({ id }) => {\n        flowIsRunning$.next([...flowIsRunning$.getValue(), id]);\n      }),\n      continueWhenFlowIsNotRunning(),\n      switchMap(({ actions, context, id }) => buildFlow({ id, actions, actions$, dispatch, context, prefix })),\n    )\n    .subscribe();\n\n  return ((actions: Action[], context: T = {} as T) => {\n    const flowId = generateId();\n\n    Promise.resolve().then(() => {\n      dispatch({\n        type,\n        id: flowId,\n        actions,\n        context,\n      });\n    });\n\n    return actions$.pipe(\n      filter((action) => action.type === `${prefix} ${FINISH_FLOW_ACTION_TYPE}`),\n      filter(({ id }) => id === flowId),\n      take(1),\n      map(({ context }) => context as T),\n    );\n  }) as FlowRunner;\n};\n"]}