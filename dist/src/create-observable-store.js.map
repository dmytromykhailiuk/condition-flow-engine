{"version":3,"file":"create-observable-store.js","sourceRoot":"","sources":["../../src/create-observable-store.ts"],"names":[],"mappings":";;;AAAA,+BAAuC;AAGhC,MAAM,qBAAqB,GAAG,CAAsB,KAAkB,EAAsB,EAAE;IACnG,MAAM,OAAO,GAAG,IAAI,sBAAe,CAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IAEzD,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IAEtD,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE;QAC1B,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;QAChC,SAAS,EAAE,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC;QAC1C,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC;KACzC,CAAkC,CAAC;AACtC,CAAC,CAAC;AAVW,QAAA,qBAAqB,yBAUhC","sourcesContent":["import { BehaviorSubject } from 'rxjs';\nimport { Action, ObservableStore, Store } from './interfaces';\n\nexport const createObservableStore = <T, A extends Action>(store: Store<T, A>): ObservableStore<T> => {\n  const subject = new BehaviorSubject<T>(store.getState());\n\n  store.subscribe(() => subject.next(store.getState()));\n\n  return Object.assign(store, {\n    pipe: subject.pipe.bind(subject),\n    subscribe: subject.subscribe.bind(subject),\n    getState: subject.getValue.bind(subject),\n  }) as unknown as ObservableStore<T>;\n};\n"]}