{"version":3,"file":"condition-operators.js","sourceRoot":"","sources":["../../src/condition-operators.ts"],"names":[],"mappings":";;;AAAA,+BAUc;AACd,+DAAmF;AAG5E,MAAM,0BAA0B,GACrC,CAAI,SAA4C,EAAE,QAA4B,EAAE,gBAA+B,EAAE,EAAE,EAAE,CACrH,CAAI,OAAsB,EAAE,EAAE,CAC5B,OAAO,CAAC,IAAI,CACV,IAAA,gBAAS,EAAC,CAAC,KAAK,EAAE,EAAE,CAClB,IAAA,SAAE,EAAC,KAAK,CAAC,CAAC,IAAI,CACZ,IAAA,qBAAc,EAAC,QAAQ,CAAC,EACxB,IAAA,aAAM,EAAC,CAAC,CAAC,CAAC,EAAE,aAAa,CAAS,EAAE,EAAE,CACpC,IAAA,uCAAiB,EAAI;IACnB,SAAS;IACT,aAAa;IACb,aAAa;CACd,CAAC,CACH,EACD,IAAA,UAAG,EAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CACjB,CACF,CACF,CAAC;AAjBO,QAAA,0BAA0B,8BAiBjC;AAEC,MAAM,qDAAqD,GAChE,CAAI,SAA4C,EAAE,QAA4B,EAAE,gBAA+B,EAAE,EAAE,EAAE,CACrH,CAAI,OAAsB,EAAE,EAAE,CAC5B,OAAO,CAAC,IAAI,CACV,IAAA,gBAAS,EAAC,CAAC,KAAK,EAAE,EAAE,CACjB,QAA0B,CAAC,IAAI,CAC9B,IAAA,2BAAoB,EAAC,IAAA,6CAAuB,EAAI,SAAS,EAAE,aAAa,CAAC,CAAC,EAC1E,IAAA,kCAA0B,EAAI,SAAS,EAAE,QAAQ,EAAE,aAAa,CAAC,EACjE,IAAA,WAAI,EAAC,CAAC,CAAC,EACP,IAAA,UAAG,EAAC,GAAG,EAAE,CAAC,KAAU,CAAC,CACtB,CACF,CACF,CAAC;AAZO,QAAA,qDAAqD,yDAY5D","sourcesContent":["import {\n  distinctUntilChanged,\n  filter,\n  map,\n  Observable,\n  ObservableInput,\n  of,\n  switchMap,\n  take,\n  withLatestFrom,\n} from 'rxjs';\nimport { isSameStateForCondition, validateCondition } from './condition-functions';\nimport { ConditionObject, ConditionsMap, LinkToCondition } from './interfaces';\n\nexport const continueIfConditionIsValid =\n  <F>(condition: ConditionObject | LinkToCondition, context$: ObservableInput<F>, conditionsMap: ConditionsMap = {}) =>\n  <T>(source$: Observable<T>) =>\n    source$.pipe(\n      switchMap((value) =>\n        of(value).pipe(\n          withLatestFrom(context$),\n          filter(([_, globalContext]: [T, F]) =>\n            validateCondition<F>({\n              condition,\n              globalContext,\n              conditionsMap,\n            }),\n          ),\n          map(() => value),\n        ),\n      ),\n    );\n\nexport const subscribeOnAllDataAndContinueWhenConditionWillBeValid =\n  <F>(condition: ConditionObject | LinkToCondition, context$: ObservableInput<F>, conditionsMap: ConditionsMap = {}) =>\n  <T>(source$: Observable<T>) =>\n    source$.pipe(\n      switchMap((value) =>\n        (context$ as Observable<F>).pipe(\n          distinctUntilChanged(isSameStateForCondition<F>(condition, conditionsMap)),\n          continueIfConditionIsValid<F>(condition, context$, conditionsMap),\n          take(1),\n          map(() => value as T),\n        ),\n      ),\n    );\n"]}