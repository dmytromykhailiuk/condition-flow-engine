{"version":3,"file":"condition-flow-engine.js","sourceRoot":"","sources":["../../src/condition-flow-engine.ts"],"names":[],"mappings":"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","sourcesContent":["import { FlowRunner } from './flow-runner';\nimport {\n  Flow,\n  LinkToCondition,\n  BackgroundFlow,\n  BackgroundFlowsMap,\n  Hooks,\n  FlowsMap,\n  ConditionsMap,\n  ConditionObject,\n  FlowValidator,\n  FlowValidatorMap,\n} from './interfaces';\nimport { ObservableInput, of, Subscription } from 'rxjs';\nimport { isSameStateForCondition, validateCondition } from './condition-functions';\nimport {\n  continueIfConditionIsValid,\n  subscribeOnAllDataAndContinueWhenConditionWillBeValid,\n} from './condition-operators';\nimport { runBackgroundSideEffects } from './background-side-effects';\nimport { validateConditionsAndRunFlow } from './validate-conditions-and-run-flow';\n\nexport const createConditionFlowEngine = <T>({\n  flowRunner,\n  conditionsMap = {},\n  flowValidatorMap = {},\n  flowsMap = {},\n  hooks = {},\n  backgroundFlows = {},\n}: {\n  flowRunner: FlowRunner;\n  conditionsMap?: ConditionsMap;\n  flowValidatorMap?: FlowValidatorMap;\n  flowsMap?: FlowsMap;\n  hooks?: Hooks;\n  backgroundFlows?: BackgroundFlowsMap;\n}) => {\n  const runFlow = (flow: Flow, context: T) => {\n    const actionsForFlow = typeof flow === 'string' ? flowsMap[flow] : flow;\n\n    return flowRunner<T>(actionsForFlow, context);\n  };\n\n  const backgroundFlowSubscriptions: { [groupId: string]: Subscription } = {};\n\n  return {\n    runFlow,\n    validateCondition: (obj: {\n      condition: ConditionObject | LinkToCondition;\n      globalContext: T;\n      localContext?: any | T;\n    }) => validateCondition<T>({ ...obj, conditionsMap }),\n    isSameStateForCondition: (condition: ConditionObject | LinkToCondition) =>\n      isSameStateForCondition<T>(condition, conditionsMap),\n    continueIfConditionIsValid: (condition: ConditionObject | LinkToCondition, context$: ObservableInput<T>) =>\n      continueIfConditionIsValid<T>(condition, context$, conditionsMap),\n    subscribeOnAllDataAndContinueWhenConditionWillBeValid: (\n      condition: ConditionObject | LinkToCondition,\n      context$: ObservableInput<T>,\n    ) => subscribeOnAllDataAndContinueWhenConditionWillBeValid<T>(condition, context$, conditionsMap),\n    validateConditionsAndRunFlow: (obj: { validator: FlowValidator | FlowValidator[] | string; context: T }) => {\n      let validator = obj.validator;\n\n      if (typeof validator === 'string') {\n        validator = flowValidatorMap[validator];\n      }\n\n      return validateConditionsAndRunFlow<T>({ ...obj, validator, flowRunner: runFlow, conditionsMap });\n    },\n    runHook(hookName: string, context: T) {\n      if (!hooks[hookName]) {\n        return of(context);\n      }\n\n      for (const conditionObject of hooks[hookName]) {\n        if (typeof conditionObject === 'string') {\n          return runFlow(conditionObject as Flow, context);\n        }\n\n        if (\n          validateCondition({ condition: (conditionObject as any).condition, globalContext: context, conditionsMap })\n        ) {\n          return runFlow((conditionObject as any).flow, context);\n        }\n      }\n\n      return of(context);\n    },\n    runBackgroundFlows(groupId: string, context$: ObservableInput<T>, backgroundFlowsArr?: BackgroundFlow[]) {\n      if (backgroundFlowSubscriptions[groupId]) {\n        backgroundFlowSubscriptions[groupId].unsubscribe();\n      }\n\n      backgroundFlowSubscriptions[groupId] = runBackgroundSideEffects<T>(\n        context$,\n        backgroundFlowsArr || backgroundFlows[groupId] || [],\n        runFlow,\n        conditionsMap,\n      );\n    },\n    stopBackgrounFlows(groupId: string) {\n      if (backgroundFlowSubscriptions[groupId]) {\n        backgroundFlowSubscriptions[groupId].unsubscribe();\n      }\n    },\n    stopAllBackgrounFlows() {\n      Object.values(backgroundFlowSubscriptions).forEach((sub) => sub.unsubscribe());\n    },\n  };\n};\n"]}