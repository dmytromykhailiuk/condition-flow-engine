{"version":3,"file":"condition-flow-engine.js","sourceRoot":"","sources":["../../src/condition-flow-engine.ts"],"names":[],"mappings":"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","sourcesContent":["import { runEngineControls } from './run-engine-control';\nimport { FlowRunner } from './flow-runner';\nimport {\n  Flow,\n  LinkToCondition,\n  BackgroundFlow,\n  BackgroundFlowsMap,\n  Hooks,\n  FlowsMap,\n  ConditionsMap,\n  ConditionObject,\n  FlowValidator,\n  FlowValidatorMap,\n  EngineBackgroundControl,\n  EngineBackgroundControlsMap,\n} from './interfaces';\nimport { Observable, ObservableInput, of, Subscription, take } from 'rxjs';\nimport { mapContext, validateCondition } from './condition-functions';\nimport {\n  continueIfConditionIsValid,\n  subscribeOnAllDataAndContinueWhenConditionWillBeValid,\n} from './condition-operators';\nimport { runBackgroundSideEffects } from './background-side-effects';\nimport { validateConditionsAndRunFlow } from './validate-conditions-and-run-flow';\n\nexport const createConditionFlowEngine = <T>({\n  flowRunner,\n  context$,\n  config: configFromPayload = {},\n}: {\n  flowRunner: FlowRunner;\n  context$: ObservableInput<T>;\n  config?: {\n    conditionsMap?: ConditionsMap;\n    flowValidatorMap?: FlowValidatorMap;\n    flowsMap?: FlowsMap;\n    hooks?: Hooks;\n    backgroundFlows?: BackgroundFlowsMap;\n    engineBackgroundControls?: EngineBackgroundControlsMap;\n  };\n}) => {\n  let config = configFromPayload;\n  const backgroundFlowSubscriptions: { [groupId: string]: Subscription } = {};\n  const engineBackgroundControlsSubscriptions: { [groupId: string]: Subscription } = {};\n\n  const runFlow = (flow: Flow) => {\n    let context: T;\n\n    (context$ as Observable<T>).pipe(take(1)).subscribe((d) => {\n      context = d;\n    });\n\n    const actionsForFlow = typeof flow === 'string' ? config?.flowsMap[flow] : flow;\n\n    return flowRunner<T>(actionsForFlow, context);\n  };\n\n  const runHook = (hookName: string) => {\n    let context: T;\n\n    (context$ as Observable<T>).pipe(take(1)).subscribe((d) => {\n      context = d;\n    });\n\n    if (!config?.hooks[hookName]) {\n      return of(context);\n    }\n\n    for (const conditionObject of config?.hooks?.[hookName] || []) {\n      if (typeof conditionObject === 'string') {\n        return runFlow(conditionObject as Flow);\n      }\n\n      if (\n        validateCondition({\n          condition: (conditionObject as any).condition,\n          globalContext: context,\n          conditionsMap: config?.conditionsMap,\n        })\n      ) {\n        return runFlow((conditionObject as any).flow);\n      }\n    }\n\n    return of(context);\n  };\n\n  const runBackgroundFlows = (groupId: string, backgroundFlowsArr?: BackgroundFlow[]) => {\n    if (backgroundFlowSubscriptions[groupId]) {\n      backgroundFlowSubscriptions[groupId].unsubscribe();\n    }\n\n    backgroundFlowSubscriptions[groupId] = runBackgroundSideEffects<T>(\n      context$,\n      backgroundFlowsArr || config?.backgroundFlows[groupId] || [],\n      runFlow,\n      config?.conditionsMap,\n    );\n  };\n\n  const stopBackgrounFlows = (groupId: string) => {\n    if (backgroundFlowSubscriptions[groupId]) {\n      backgroundFlowSubscriptions[groupId].unsubscribe();\n    }\n  };\n\n  const stopAllBackgrounFlows = () => {\n    Object.values(backgroundFlowSubscriptions).forEach((sub) => sub.unsubscribe());\n  };\n\n  const runEngineBackgroundControls = (groupId: string, engineBackgroundControlsArr?: EngineBackgroundControl[]) => {\n    if (engineBackgroundControlsSubscriptions[groupId]) {\n      engineBackgroundControlsSubscriptions[groupId].unsubscribe();\n    }\n\n    engineBackgroundControlsSubscriptions[groupId] = runEngineControls<T>(\n      engineBackgroundControlsArr || config?.engineBackgroundControls[groupId] || [],\n      ({ runEngineMethods }) => {\n        runEngineMethods.forEach(({ methodName, ...rest }) => {\n          switch (methodName) {\n            case 'runBackgroundFlows': {\n              runBackgroundFlows((rest as any).groupId);\n              return;\n            }\n            case 'runHook': {\n              runHook((rest as any).hookName);\n              return;\n            }\n            case 'runFlow': {\n              runFlow((rest as any).flowName);\n              return;\n            }\n            case 'stopBackgrounFlows': {\n              stopBackgrounFlows((rest as any).groupId);\n              return;\n            }\n            case 'stopAllBackgrounFlows': {\n              stopAllBackgrounFlows();\n              return;\n            }\n          }\n        });\n      },\n      context$,\n      config?.conditionsMap,\n    );\n  };\n\n  const stopEngineBackgroundControls = (groupId: string) => {\n    if (engineBackgroundControlsSubscriptions[groupId]) {\n      engineBackgroundControlsSubscriptions[groupId].unsubscribe();\n    }\n  };\n\n  const stopAllEngineBackgroundControls = () => {\n    Object.values(engineBackgroundControlsSubscriptions).forEach((sub) => sub.unsubscribe());\n  };\n\n  const updateConfig = (fn: (_: typeof config) => typeof config) => {\n    config = fn(config);\n  };\n\n  return {\n    runFlow,\n    runHook,\n    updateConfig,\n    runBackgroundFlows,\n    stopBackgrounFlows,\n    stopAllBackgrounFlows,\n    runEngineBackgroundControls,\n    stopEngineBackgroundControls,\n    stopAllEngineBackgroundControls,\n    mapContext: (mapping: string[]) => {\n      let context: T;\n\n      (context$ as Observable<T>).pipe(take(1)).subscribe((d) => {\n        context = d;\n      });\n\n      return mapContext(context, mapping);\n    },\n    validateCondition: (condition: ConditionObject | LinkToCondition) => {\n      let context: T;\n\n      (context$ as Observable<T>).pipe(take(1)).subscribe((d) => {\n        context = d;\n      });\n\n      return validateCondition<T>({ condition, globalContext: context, conditionsMap: config?.conditionsMap });\n    },\n    continueIfConditionIsValid: (condition: ConditionObject | LinkToCondition) =>\n      continueIfConditionIsValid<T>(condition, context$, config?.conditionsMap),\n    subscribeOnAllDataAndContinueWhenConditionWillBeValid: (condition: ConditionObject | LinkToCondition) =>\n      subscribeOnAllDataAndContinueWhenConditionWillBeValid<T>(condition, context$, config?.conditionsMap),\n    validateConditionsAndRunFlow: (validatorObj: FlowValidator | FlowValidator[] | string) => {\n      let context: T;\n\n      (context$ as Observable<T>).pipe(take(1)).subscribe((d) => {\n        context = d;\n      });\n      let validator = validatorObj;\n\n      if (typeof validator === 'string') {\n        validator = config?.flowValidatorMap[validator];\n      }\n\n      return validateConditionsAndRunFlow<T>({\n        context,\n        validator,\n        flowRunner: runFlow,\n        conditionsMap: config?.conditionsMap,\n      });\n    },\n  };\n};\n"]}