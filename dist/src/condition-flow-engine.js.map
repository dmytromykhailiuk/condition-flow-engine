{"version":3,"file":"condition-flow-engine.js","sourceRoot":"","sources":["../../src/condition-flow-engine.ts"],"names":[],"mappings":"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","sourcesContent":["import { FlowRunner, createFlowRunner } from './flow-runner';\nimport { Flow, LinkToCondition, BackgroundFlow, ConditionObject, FlowValidator, Config, Action } from './interfaces';\nimport {\n  Observable,\n  ObservableInput,\n  of,\n  Subscription,\n  take,\n  tap,\n  filter,\n  map,\n  BehaviorSubject,\n  Subject,\n  switchMap,\n} from 'rxjs';\nimport { validateCondition } from './condition-functions';\nimport {\n  continueIfConditionIsValid,\n  subscribeOnAllDataAndContinueWhenConditionWillBeValid,\n} from './condition-operators';\nimport { runBackgroundSideEffects } from './background-side-effects';\nimport { validateConditionsAndRunFlow } from './validate-conditions-and-run-flow';\n\nexport const createConditionFlowEngine = <T>({\n  actions$,\n  prefix,\n  dispatch,\n  config: configFromPayload = {},\n}: {\n  actions$: Subject<Action>;\n  prefix?: string;\n  dispatch: (_: Action<string>) => void;\n  config?: Config;\n}) => {\n  const config = { data: configFromPayload };\n\n  const flowRunner = createFlowRunner({\n    actions$,\n    dispatch,\n    prefix,\n  });\n\n  const flowInProgress$ = new BehaviorSubject(false);\n\n  const runFlow = (flow: Flow, context: T = {} as T) => {\n    flowInProgress$.next(true);\n    const actionsForFlow = typeof flow === 'string' ? config?.data?.flowsMap[flow] : flow;\n\n    return flowRunner<T>(actionsForFlow, context).pipe(\n      tap(() => {\n        flowInProgress$.next(false);\n      }),\n    );\n  };\n\n  const updateConfig = (fn: (_: Config) => Config) => {\n    config.data = fn(config.data);\n  };\n\n  const backgroundFlowSubscriptions: { [groupId: string]: Subscription } = {};\n\n  return {\n    runFlow,\n    updateConfig,\n    isFlowInProgress: () => flowInProgress$.getValue(),\n    continueWhenFlowFinished:\n      () =>\n      <T>(source$: Observable<T>) =>\n        source$.pipe(\n          switchMap((value) =>\n            flowInProgress$.pipe(\n              filter((flowInProgress) => !flowInProgress),\n              take(1),\n              map(() => value),\n            ),\n          ),\n        ),\n    validateCondition: (obj: { condition: ConditionObject | LinkToCondition; context: T }) =>\n      validateCondition<T>({ ...obj, globalContext: obj.context, conditionsMap: config?.data?.conditionsMap }),\n    continueIfConditionIsValid: (condition: ConditionObject | LinkToCondition, context$: ObservableInput<T>) =>\n      continueIfConditionIsValid<T>(condition, context$, config?.data?.conditionsMap),\n    subscribeOnAllDataAndContinueWhenConditionWillBeValid: (\n      condition: ConditionObject | LinkToCondition,\n      context$: ObservableInput<T>,\n    ) => subscribeOnAllDataAndContinueWhenConditionWillBeValid<T>(condition, context$, config?.data?.conditionsMap),\n    validateConditionsAndRunFlow: (obj: { validator: FlowValidator | FlowValidator[] | string; context: T }) => {\n      let validator = obj.validator;\n\n      if (typeof validator === 'string') {\n        validator = config?.data?.flowValidatorMap[validator];\n      }\n\n      return validateConditionsAndRunFlow<T>({\n        ...obj,\n        validator,\n        flowRunner: runFlow,\n        conditionsMap: config?.data?.conditionsMap,\n      });\n    },\n    runHook(hookName: string, context: T) {\n      if (!config?.data?.hooks[hookName]) {\n        return of(context);\n      }\n\n      for (const conditionObject of config?.data?.hooks?.[hookName] || []) {\n        if (typeof conditionObject === 'string') {\n          return runFlow(conditionObject as Flow, context);\n        }\n\n        if (\n          validateCondition({\n            condition: (conditionObject as any).condition,\n            globalContext: context,\n            conditionsMap: config?.data?.conditionsMap,\n          })\n        ) {\n          return runFlow((conditionObject as any).flow, context);\n        }\n      }\n\n      return of(context);\n    },\n    runBackgroundFlows(groupId: string, context$: ObservableInput<T>, backgroundFlowsArr?: BackgroundFlow[]) {\n      if (backgroundFlowSubscriptions[groupId]) {\n        backgroundFlowSubscriptions[groupId].unsubscribe();\n      }\n\n      backgroundFlowSubscriptions[groupId] = runBackgroundSideEffects<T>(\n        context$,\n        backgroundFlowsArr || config?.data?.backgroundFlows[groupId] || [],\n        runFlow,\n        config?.data?.conditionsMap,\n      );\n    },\n    stopBackgroundFlows(groupId: string) {\n      if (backgroundFlowSubscriptions[groupId]) {\n        backgroundFlowSubscriptions[groupId].unsubscribe();\n      }\n    },\n    stopAllBackgroundFlows() {\n      Object.values(backgroundFlowSubscriptions).forEach((sub) => sub.unsubscribe());\n    },\n  };\n};\n"]}