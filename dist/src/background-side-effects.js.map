{"version":3,"file":"background-side-effects.js","sourceRoot":"","sources":["../../src/background-side-effects.ts"],"names":[],"mappings":";;;AAAA,+BAAgE;AAChE,+DAG+B;AAGxB,MAAM,wBAAwB,GAAG,CACtC,QAA4B,EAC5B,eAAiC,EACjC,QAA0C,EAC1C,gBAA+B,EAAE,EACjC,EAAE,CACF,IAAA,WAAI,EAAC,eAAe,CAAC;KAClB,IAAI,CACH,IAAA,eAAQ,EAAC,CAAC,YAAY,EAAE,EAAE,CACxB,IAAA,SAAE,EAAC,EAAE,CAAC,CAAC,IAAI,CACT,IAAA,gDAA0B,EAAC,YAAY,CAAC,oBAAoB,EAAE,QAAQ,EAAE,aAAa,CAAC,EACtF,IAAA,2EAAqD,EACnD,YAAY,CAAC,oBAAoB,EACjC,QAAQ,EACR,aAAa,CACd,EACD,IAAA,UAAG,EAAC,CAAC,OAAO,EAAE,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CACvD,CACF,CACF;KACA,SAAS,EAAE,CAAC;AApBJ,QAAA,wBAAwB,4BAoBpB","sourcesContent":["import { from, mergeMap, ObservableInput, of, tap } from 'rxjs';\nimport {\n  continueIfConditionIsValid,\n  subscribeOnAllDataAndContinueWhenConditionWillBeValid,\n} from './condition-operators';\nimport { BackgroundFlow, ConditionsMap, Flow } from './interfaces';\n\nexport const runBackgroundSideEffects = <T>(\n  context$: ObservableInput<T>,\n  backgroundFlows: BackgroundFlow[],\n  callback: (flow: Flow, context: T) => void,\n  conditionsMap: ConditionsMap = {},\n) =>\n  from(backgroundFlows)\n    .pipe(\n      mergeMap((bagroundFlow) =>\n        of({}).pipe(\n          continueIfConditionIsValid(bagroundFlow.conditionToSubscribe, context$, conditionsMap),\n          subscribeOnAllDataAndContinueWhenConditionWillBeValid(\n            bagroundFlow.conditionToSubscribe,\n            context$,\n            conditionsMap,\n          ),\n          tap((context) => callback(bagroundFlow.flow, context)),\n        ),\n      ),\n    )\n    .subscribe();\n"]}