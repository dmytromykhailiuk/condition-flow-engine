{"version":3,"file":"condition-functions.js","sourceRoot":"","sources":["../../src/condition-functions.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConditionObject, ConditionsMap, LinkToCondition, Operation, VariableInCondition } from './interfaces';\n\nconst getVariablesInCondition = (\n  conditionObject: ConditionObject,\n  variableContext: string[] = [],\n): VariableInCondition[] => {\n  let localVariableContext = variableContext;\n\n  if (conditionObject.mapFromGlobalContext) {\n    localVariableContext = conditionObject.mapFromGlobalContext;\n  }\n\n  if (conditionObject.mapFromLocalContext) {\n    localVariableContext = [...localVariableContext, ...conditionObject.mapFromLocalContext];\n  }\n\n  switch (conditionObject.operation) {\n    case Operation.OR:\n    case Operation.AND: {\n      return conditionObject.value.reduce(\n        (acc, obj) => [...acc, ...getVariablesInCondition(obj, localVariableContext)],\n        [],\n      );\n    }\n    case Operation.NOT: {\n      return getVariablesInCondition(conditionObject.value, localVariableContext);\n    }\n    default: {\n      return [\n        {\n          mapping: localVariableContext,\n          operation: conditionObject.operation,\n          value: conditionObject.value,\n        },\n      ];\n    }\n  }\n};\n\nconst mapContext = (context: any, mapping: string[]) =>\n  !mapping.length ? context : mapContext(context?.[mapping[0]], mapping.slice(1));\n\nconst makeBaseOperation = (operation: Operation, valueFromCondition: any, valueFromContext: any): boolean => {\n  switch (operation) {\n    case Operation.EQ: {\n      return valueFromCondition === valueFromContext;\n    }\n    case Operation.NE: {\n      return valueFromCondition !== valueFromContext;\n    }\n    case Operation.GT: {\n      return valueFromCondition < valueFromContext;\n    }\n    case Operation.LT: {\n      return valueFromCondition > valueFromContext;\n    }\n    case Operation.GE: {\n      return valueFromCondition <= valueFromContext;\n    }\n    case Operation.LE: {\n      return valueFromCondition >= valueFromContext;\n    }\n    case Operation.INCLUDES: {\n      return Array.isArray(valueFromCondition)\n        ? valueFromCondition.includes(valueFromContext)\n        : valueFromContext.includes(valueFromCondition);\n    }\n    case Operation.TO_BOOLEAN_EQ: {\n      return Boolean(valueFromContext) === valueFromCondition;\n    }\n    default: {\n      return true;\n    }\n  }\n};\n\nexport const isSameStateForCondition =\n  <T = any>(condition: ConditionObject | LinkToCondition, conditionsMap: ConditionsMap = {}) =>\n  (prevContext: T, currContext: T): boolean => {\n    const conditionObject: ConditionObject = typeof condition === 'string' ? conditionsMap[condition] : condition;\n\n    const variablesInConditions = getVariablesInCondition(conditionObject);\n\n    return variablesInConditions.every(({ mapping, operation, value }) => {\n      const prevValue = mapContext(prevContext, mapping);\n      const currValue = mapContext(currContext, mapping);\n\n      return makeBaseOperation(operation, value, prevValue) === makeBaseOperation(operation, value, currValue);\n    });\n  };\n\nexport const validateCondition = <T>({\n  condition,\n  globalContext,\n  localContext = globalContext,\n  conditionsMap = {},\n}: {\n  condition: ConditionObject | LinkToCondition;\n  globalContext: T;\n  localContext?: any | T;\n  conditionsMap?: ConditionsMap;\n}): boolean => {\n  let newContext = localContext;\n\n  const conditionObject: ConditionObject =\n    typeof condition === 'string' ? conditionsMap[condition] : (condition as ConditionObject);\n\n  if (conditionObject.mapFromGlobalContext) {\n    newContext = mapContext(localContext, conditionObject.mapFromGlobalContext);\n  }\n\n  if (conditionObject.mapFromLocalContext) {\n    newContext = mapContext(localContext, conditionObject.mapFromLocalContext);\n  }\n\n  switch (conditionObject.operation) {\n    case Operation.OR: {\n      return conditionObject.value.some((childCondition: ConditionObject) =>\n        validateCondition({ condition: childCondition, globalContext, localContext: newContext, conditionsMap }),\n      );\n    }\n    case Operation.AND: {\n      return conditionObject.value.every((childCondition: ConditionObject) =>\n        validateCondition({ condition: childCondition, globalContext, localContext: newContext, conditionsMap }),\n      );\n    }\n    case Operation.NOT: {\n      return !validateCondition({ condition, globalContext, localContext: newContext, conditionsMap });\n    }\n    default: {\n      return makeBaseOperation(conditionObject.operation, conditionObject.value, newContext);\n    }\n  }\n};\n"]}